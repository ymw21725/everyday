import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';                    // 스타일 지정을 위한 CSS 경로 지정을 통한 파일 임포트 필요.
//                                       // 최상위 계층에서만 임포트하면 해당 하위 계층의 모듈에 모두 적용.

const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(
    /* 
        < JSX >

    - js 에서 리액트 프레임을 이용하여 HTML 형식을 구현하기 위해 별도의 메서드나 도구의 도움없이
      HTML 과 거의 유사한 형태로 표현하여 요소등을 구현할 수 있는 문법 형식.
    */
    // <h1>테스트 리액트1</h1>
    // 테스트 리액트2           // 렌더링할 다중 JSX 요소는 반드시 아래 예시와 같이 반드시 하나의
    //                          // 부모요소가 감싸는 형태로 구현해야함에 주의.
);

/* ============================================================================================ */

root.render(
    <div>
        <h1>테스트 리액트1</h1>
        테스트 리액트2
        <h2>테스트 리액트3</h2>
    </div>
);

/* ============================================================================================ */

/* 
    < Fragment >

- JSX 의 다중 요소들을 감싸기 위한 불필요한 부모요소의 추가를 막기 위한 대체 도구로써 이름이 없는
  태크 형식을 취하여 DOM 에 실제 요소가 할당되지 않은 상태로 구현되는 것을 확인 가능.
*/
root.render(
    <>
        <h1>테스트 리액트1</h1>
        테스트 리액트2
        <h2>테스트 리액트3</h2>
    </>
);

/* ============================================================================================ */

/* 
    < 닫는 태그가 없는 태그 >

- 리액트의 JSX 는 XML 문법이 엄격히 적용되어 닫는 태그가 없는 태그의 경우 반드시 태그명 뒤에
  '/' 구분자를 적용해야함에 주의.
*/
root.render(
    <>
        테스트 리액트1<br/> 
        테스트 리액트2
		
    </>
);

/* ============================================================================================ */

/* 
    < 주석 >

- JSX 의 주석은 블럭{} 내에 다중 주석 처리 형식을 취하여 지정.
*/
root.render(
    <>
        <h1>테스트 리액트1</h1>
        {/* 테스트 리액트2 */}
        <h2>테스트 리액트3</h2>
    </>
);

/* ============================================================================================ */

/* 
    < 변수나 함수를 이용한 동적 JSX 의 삽입 >

- 리액트에서는 JSX 자체를 하나의 객체로 인식하여 참조를 반환함으로써
  변수나 함수를 통해 전달 가능하며, JSX 내에서도 블럭{}을 이용하여
  표현식을 적용 가능.
  단, 표현식은 구문형식이 불가함에 주의.
*/

const h3_Tag = <h3>테스트 리액트3</h3>;     // JSX 형식을 직접 변수에 할당 가능.

function return_h4_Tag() {
    return <h4>테스트 리액트4</h4>;         // JSX 형식을 함수를 통해 반환 받는 것도 가능.
}

const reactTxt = '리액트';

root.render(
    <>
        <h1>테스트 리액트1</h1>
        <h2>테스트 리액트2</h2>
        {h3_Tag}                           {/* 표현식 블럭{} 내에 요소들의 참조나 값을 전달하여 활용 가능 */}
        {return_h4_Tag()}
        <h5>테스트 {reactTxt}5</h5> 
        {/* 중괄호 사용하여 값 전달. 및 반환 */}
    </>
);

/* ============================================================================================ */

/* 
    < JSX 형식 태그의 인라인 스타일 지정  >

- 객체 형식으로 지정해야 하며, js 에서의 css 퍼로퍼티명 적용시와 마찬가지로 '-' 이 없는
  대문자 연결자 형식으로 지정해야 함에 주의.
*/

// function setStyle() {
//     return {
//         fontSize: '3em',
//         textDecoration: 'underline',
//     };
// }

// root.render(
//     <>
//         <h1 style={{ color: 'red', backgroundColor: 'yellow' }}>테스트 리액트1</h1>
//         <h2 style={setStyle()}>테스트 리액트2</h2>
//         {/* h1을 객체인 항목들로 받아 스타일 적용됨.  */}
//     </>
// );

/* ============================================================================================ */

/* 
    < JSX 형식 태그의 클래스 지정  >

- JSX 에서의 클래스 지정은 "class" 가 아닌 "className" 형식으로 지정해야 함에 주의.
  페이지에는 "class" 지정에 따른 스타일 적용이 되지만, 개발자 도구에서 경고가 발생함을 확인 가능.
  단, 를래스 지정은 컴포넌트 태그에는 직접 지정 불가함에 주의.
*/
// root.render(
    // <>
    //     <h1 className="redColor">테스트 리액트1</h1>
    //     <h2 className="redColor">테스트 리액트2</h2>
    //     <h1 class="redColor">테스트 리액트1</h1>    
    //     <h2 class="redColor">테스트 리액트2</h2>    
    //      {/* class를 쓰면 개발자 도구에서 콘솔창 오류남. className사용해야함.  */}
         
    // </>
// );

//

/* ============================================================================================ */

/* 
   < JSX 에서의 undefined, null, false 등의 렌더링 >

- JSX 에서의 undefined, null, false 등의 값을 렌더링시에는 아무것도 표시되지 않음.
*/