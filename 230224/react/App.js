/* 
    < 객체의 구조분해할당(Destructuring assignment)과 전개구문(Spread syntax) >
*/

const obj = {
    a: 1,
    b: 2,
    c: 3,
 }; 
 // obj에 객체 지정.
 
 /* ================================================================================ */
 /* < 구조분해할당 > */
 
 /* 
    구조분해할당 시 블럭{} 내 할당 변수는 객체의 프로퍼티명과 동일해야함.
    위의 const a,b,c 값과 밑의 let{a,b,c}가 같은것 의미.
 */
 
 let { a, b, c } = obj; // 위의 const obj와 let obj이름이 같아야함.
 console.log(`a = ${a}, b =${b}, c = ${c}`); 
 
 /*
    구조분해할당 시 할당 변수명을 변경하고자 하는 경우,
    콜론(:) 구분자 뒤에 새로운 변수명 명시.
    ${cpA}부분에 ${a} 지정해도 됨, 그러나 이름 변경하여서도 된다. 
 */
 let { a: cpA, b: cpB, c: cpC } = obj;
 console.log(`cpA = ${cpA}, cpB = ${cpB}, cpC = ${cpC}`);
 
 /* ================================================================================ */
 /* < 전개구문 > */
 
 /* 
    < 전개구문을 활용한 객체의 복사 >
 */
 
 let cpObj1 = {
    ...obj,  //원본을 놔두려면 전개구문 사용하기.
 };
 console.log(cpObj1); // {a:1, b:2, c:3} 출력됨.
 
 /* 
    < 전개구문을 활용한 객체의 복사와 추가 멤버의 결합 >
 */
 let cpObj2 = {
    ...obj,  // 원본있고 d라는 객체를 추가하는 것.
    d: 4,
 };
 console.log(cpObj2); // {a:1, b:2, c:3, d:4} 출력.
 
 /* 
    < 전개구문을 활용한 객체의 복사와 복사 멤버의 값 변경 >
 */
 let cpObj3 = {
    ...obj,  // a,b,c,가 있으나 밑에서 a:15를 했으므로 a에 값이 변경된다.
    a: 15,
 };
 console.log(cpObj3); // {a:15, b:2, c:3} 출력됨.
 
 // 노션에서 3번 문제에서 useState를 남발한 문제에서
 // 전개구문 사용시 useState를 1개로 줄인 후 문제를 풀 수 있다.