/*
    Array.sort(compareFn?: (a: T, b: T) => number): this

- 콜백함수를 생략시 기본적으로 문자열의 크기 값을 비교하여 해당 배열을 오름차순 정렬하고,
  정렬된 해당 배열의 참조를 리턴.
  단, 배열의 모든 요소는 내부적으로 문자열로 변환한 값으로 비교함에 따라 자릿수가 다른 경우,
  각 문자열의 첫 번째 문자부터 대소 비교를 진행함으로써 첫 자리에 대한 엉뚱한 정렬 결과를
  확인 가능.
  sort 메서드의 콜백함수는 정렬 기준을 정의하는 함수로써 두 개의 인수와 리턴값이 반드시 필요
  한데, 상기와 같은 문제점을 해결하기 위해서는 아래와 같이 설정.
  오름차순 정렬을 하는 경우에는 콜백 함수에 a - b 의 값을 반환하도록 설정.
  내림차순 정렬을 하는 경우네는 콜백 함수에 b - a 의 값을 반환하도록 설정.
  
  배열의 요소가 숫자형태가 아닌 문자열 포함된 경우에는 위와 같이 지정한 방식에 의한 정렬이
  제대로 동작하지 않음.
  따라서 오름차순으로 정렬해야 하는 경우에는 콜백함수를 생략한 형태로 지정을 하고 
  내림차순 정렬을 하는 경우에는 콜백함수가 생략된 형태로 하되 오름차순 정렬을 한후 reverse
  메서드를 이용하여 거꾸로 치환 배치를 함으로써 내림차순 정렬이 가능.
*/
const num1 = [4, 1, 3, 5, 2],
    num2 = [5, 1200, 23, 3, 47];

num1.sort();    // 1,2,3,4,5 순서(오름차순)으로 출력 된다. 
console.log(num1);
console.log('+++++++++++++++++++');

num2.sort();  // num2배열의 요소는 num1배열과 달리 자릿수가 다른 숫자형식인데 이를 문자열로 변환후 비교를
//            // 진행함에 있어 각 문자열의 첫 번째 문자부터 문자 대소 비교를 진행함에 따라 숫자형식 일때의
//            // 비교와는 전혀 다른 정렬 결과 확인 가능.
console.log(num2);  // 자릿수가 2자리 이상이면 제대로 동작을 안함. 밑에서 ((a,b)=> a - b)방식으로 해결해야 한다.
console.log('+++++++++++++++++++');

let arrNumber = [17, 2, 119, 55, 410, 6];
arrNumber.sort((a, b) => a - b);    // 오름차순으로 정렬 [2, 6, 17, 55, 119, 410]
console.log(arrNumber); // 두 숫자를 비교하여 a와 b 중 작은 숫자는 앞쪽으로 보내고 큰 수는 뒤로 보내는 방식(여러번 해서)
console.log('+++++++++++++++++++');


arrNumber.sort((a, b) => b - a);    // 내림차순으로 정렬. [410, 119, 55, 17, 6, 2]
console.log(arrNumber);
console.log('+++++++++++++++++++');


let str = ['aclock', 'All', 'Bbc', 'aSome', 'kfc']; // sort하면 All, Bbc, aSome, aclock, kfc 순서대로 배치된다.
                                                    // ASCII코드 순서로 대문자-> 소문자 순서이므로 
str.sort();
console.log(str);
console.log('+++++++++++++++++++');

str.sort((a, b) => b - a);  // 문자열에는 제대로 동작하지 않는다.
console.log(str);
console.log('+++++++++++++++++++');

str.sort().reverse();   // 오름차순으로 정렬을 한 후 reverse로 뒤집는다. 
console.log(str);